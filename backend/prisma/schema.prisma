generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  name       String
  email      String @unique
  password   String
  isverified Boolean @default(false)
  zaps       Zap[]
}

model Zap {
  id        String   @id @default(uuid())
  triggerId String
  userId    String
  trigger   Trigger?
  actions   Action[]
  zapRun    ZapRun[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trigger {
  id                String           @id @default(uuid())
  zapId             String           @unique
  availabeTriggerId String
  metadata          Json             @default("{}")
  type              AvailableTrigger @relation(fields: [availabeTriggerId], references: [id])
  zap               Zap              @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model AvailableTrigger {
  id       String    @id @default(uuid())
  name     String
  image    String
  triggers Trigger[]
}

model Action {
  id               String          @id @default(uuid())
  zapId            String
  availabeActionId String
  metadata         Json            @default("{}")
  type             AvailableAction @relation(fields: [availabeActionId], references: [id])
  sortingOrder     Int             @default(0)
  zap              Zap             @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model AvailableAction {
  id      String   @id @default(uuid())
  name    String
  image   String
  actions Action[]
}

model ZapRun {
  id           String        @id @default(uuid())
  zapId        String
  metadata     Json
  zap          Zap           @relation(fields: [zapId], references: [id], onDelete: Cascade)
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id])
}
